{"version":3,"sources":["components/Square/index.js","components/Board/index.js","components/Game/index.js","winner.js","App.js","index.js"],"names":["Square","value","onClick","style","fontSize","backgroundColor","border","fontWeight","cursor","outline","color","Board","squares","borderRadius","width","height","margin","display","gridTemplate","map","square","i","key","Game","useState","Array","fill","history","setHistory","stepNumber","setStepNumber","isXNext","setIsXNext","winner","lines","length","a","b","c","calculateWinner","className","timeInHistory","slice","current","_step","move","destination","step","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAqBeA,MAnBf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QACfC,EAAQ,CACVC,SAAU,OACVC,gBAAiB,YACjBC,OAAQ,oBACRC,WAAY,MACZC,OAAQ,UACRC,QAAS,QAMb,OAFAN,EAAMO,MAAkB,MAAVT,EAAgB,UAAY,WAGtC,4BAAQE,MAAOA,EAAOD,QAASA,GAAUD,ICMlCU,MAnBf,YAAsC,IAArBC,EAAoB,EAApBA,QAASV,EAAW,EAAXA,QAUtB,OACI,yBAAKC,MAVK,CACVG,OAAQ,4BACRO,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,oCAITN,EAAQO,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAGpB,MAAOmB,EAAQlB,QAAS,kBAAMA,EAAQmB,W,MC8CvDE,MAxDf,WAAiB,IAAD,EACkBC,mBAAS,CAACC,MAAM,GAAGC,KAAK,QAD1C,mBACLC,EADK,KACIC,EADJ,OAEwBJ,mBAAS,GAFjC,mBAELK,EAFK,KAEOC,EAFP,OAGkBN,oBAAS,GAH3B,mBAGLO,EAHK,KAGIC,EAHJ,KAINC,ECTH,SAAyBrB,GAY5B,IAVA,IAAMsB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFb,EAAI,EAAGA,EAAIa,EAAMC,OAAQd,IAAK,CAAC,IAAD,cACjBa,EAAMb,GADW,GAC5Be,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAGnC,GAAI1B,EAAQwB,IAAMxB,EAAQwB,KAAOxB,EAAQyB,IAAMzB,EAAQwB,KAAOxB,EAAQ0B,GAClE,OAAO1B,EAAQwB,GAIvB,OAAO,KDXQG,CAAgBZ,EAAQE,IAsCvC,OACI,oCACI,yBAAKW,UAAU,UACX,2BAAIP,EAAS,aAAeA,EAAS,wBAAuBF,EAAU,IAAM,OAEhF,kBAAC,EAAD,CAAOnB,QAASe,EAAQE,GAAa3B,QAzC7C,SAAqBmB,GACjB,IAAMoB,EAAgBd,EAAQe,MAAM,EAAGb,EAAa,GAC9Cc,EAAUF,EAAcZ,GACxBjB,EAAO,YAAO+B,GAEhBV,GAAUrB,EAAQS,KAEtBT,EAAQS,GAAKU,EAAU,IAAM,IAC7BH,EAAW,GAAD,mBAAKa,GAAL,CAAoB7B,KAC9BkB,EAAcW,EAAcN,QAC5BH,GAAYD,OAgCR,yBAAKS,UAAU,SAjBnBb,EAAQR,KAAI,SAACyB,EAAOC,GAChB,IAAMC,EAAcD,EAAI,yBAAqBA,GAAS,YACtD,OACI,wBAAIL,UAAU,cAAclB,IAAKuB,GAC7B,4BAAQL,UAAU,UAAUtC,QAAS,kBAbjD4B,EAHWiB,EAgBmDF,QAZ9Db,EAAWe,EAAO,IAAM,GAJb,IAAAA,IAgB2DD,U,ME/B/DE,MANf,WACE,OACE,kBAAC,EAAD,OCAJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9c4c671d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square({ value, onClick }) {\r\n    const style = {\r\n        fontSize: '30px',\r\n        backgroundColor: 'lightblue',\r\n        border: '2px solid #e6ecff',\r\n        fontWeight: '800',\r\n        cursor: 'pointer',\r\n        outline: 'none'\r\n    }\r\n\r\n    //se value for 'X' a cor da fonte será vermelha. Senão será azul\r\n    style.color = value === 'X' ? '#ff0000' : 'darkblue'\r\n\r\n    return (\r\n        <button style={style} onClick={onClick}>{value}</button>\r\n    )\r\n\r\n}\r\n\r\nexport default Square","import React from 'react';\r\nimport Square from '../Square'\r\n\r\nfunction Board({ squares, onClick }) {\r\n    const style = {\r\n        border: '4px solid rgb(0, 94, 156)',\r\n        borderRadius: '10px',\r\n        width: '250px',\r\n        height: '250px',\r\n        margin: '0 auto',\r\n        display: 'grid',\r\n        gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\r\n    }\r\n    return (\r\n        <div style={style}>\r\n            {squares.map((square, i) => (\r\n                <Square key={i} value={square} onClick={() => onClick(i)} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board","import React, { useState } from 'react'\r\nimport Board from '../Board'\r\nimport { calculateWinner } from '../../winner'\r\nimport './style.css'\r\n\r\n\r\nfunction Game() {\r\n    const [history, setHistory] = useState([Array(9).fill(null)]) //history será um array que irá armazenar todas as jogadas, iniciando com null\r\n    const [stepNumber, setStepNumber] = useState(0) //stepNumber contará o número de jogadas\r\n    const [isXNext, setIsXNext] = useState(true) //isXNext verifica se o próximo valor a ser inserido no quadrado é \"X\" ou \"O\"\r\n    const winner = calculateWinner(history[stepNumber]) //usa o método calculateWinner do arquivo \"winner\" para verificar quem é o vencedor, enviando como parâmetro a jogada atual (history[stepNumber])\r\n\r\n    function handleClick(i) {\r\n        const timeInHistory = history.slice(0, stepNumber + 1) //retorna um array do histórico de jogadas começando do 0 até o número de jogadas\r\n        const current = timeInHistory[stepNumber] //current armazena a jogada atual\r\n        const squares = [...current] //squares armazena uma cópia da jogada atual\r\n\r\n        if (winner || squares[i]) return; //se já houver um vencedor ou se o jogador clicar em um quadrado ocupado, ele retorna\r\n\r\n        squares[i] = isXNext ? 'X' : 'O'; //Insere um X ou O no quadrado clicado\r\n        setHistory([...timeInHistory, squares]) //atualiza o estado de history adicionando uma cópia de timeInHistory e acrescentando squares\r\n        setStepNumber(timeInHistory.length) //atualiza o estado de stepNumber que será igual ao tamanho do array timeInHistory\r\n        setIsXNext(!isXNext)//troca o valor de isXNext\r\n    }\r\n\r\n    const jumpTo = step => {\r\n        //atualizada o estado de stepNumber para o número da jogada passado no parâmetro.\r\n        //Por exemplo, se o jogador clicar no botão \"Jump to 2\", step terá o valor 2 e o jogo volta na 2º jogada\r\n        setStepNumber(step)\r\n        setIsXNext(step % 2 === 0)//se o módulo de step dividido por 2 for igual a 0, isXNext será true, significando que o próximo jogador será \"X\"\r\n    }\r\n\r\n    const renderMoves = () => (\r\n        //_step é o array de jogadas\r\n        //move é o número da jogada\r\n        //aqui será criada a lista de botões para voltar a cada jogada realizada\r\n        //quando o jogador clicar em um dos botões, será chamado o método jumpTo(move) passando o número da jogada como parâmetro\r\n        history.map((_step, move) => {\r\n            const destination = move ? `Ir para jogada ${move}` : \"Início\"\r\n            return (\r\n                <li className='listButtons' key={move}>\r\n                    <button className='buttons' onClick={() => jumpTo(move)}>{destination}</button>\r\n                </li>\r\n            )\r\n        })\r\n    )\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"player\">\r\n                <p>{winner ? 'Vencedor: ' + winner : 'Próximo jogador: ' + (isXNext ? 'X' : 'O')}</p>\r\n            </div>\r\n            <Board squares={history[stepNumber]} onClick={handleClick} />\r\n            <div className=\"moves\">\r\n                {renderMoves()}\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Game","//recebe como parâmetro o valor do quadrado que o jogador clicou(X ou O)\r\nexport function calculateWinner(squares) {\r\n    //lista de todas as linhas (horizontais, verticais e diagonais)\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i]\r\n        //se o valor do quadrado \"a\" for igual de \"b\" e \"c\", então retorna o valor desse quadrado (X ou O) e o jogo acaba\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a]\r\n        }\r\n    }\r\n    //senão retorna nulo e o jogo continua\r\n    return null\r\n}\r\n\r\n","import React from 'react';\nimport Game from './components/Game/index'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}